// Face Direction
movement FaceUp {
    face_up
}

movement FaceDown {
    face_down
}

movement FaceLeft {
    face_left
}

movement FaceRight {
    face_right
}

// Walk Direction
movement WalkUp {
    walk_up
}

movement WalkDown {
    walk_down
}

movement WalkLeft {
    walk_left
}

movement WalkRight {
    walk_right
}

// Player Truck Facing Direction
script TruckFacingDirection {
    applymovement(OBJ_EVENT_ID_PLAYER, FaceRight)
}

// Return to last position
script PlayerReturnToLastPosition {
    specialvar(VAR_RESULT, GetPlayerFacingDirection)
    if (var(VAR_RESULT) == DIR_NORTH) {
        applymovement(OBJ_EVENT_ID_PLAYER, WalkDown)
	    waitmovement(0)
    } elif (var(VAR_RESULT) == DIR_EAST) {
        applymovement(OBJ_EVENT_ID_PLAYER, WalkLeft)
	    waitmovement(0)
    } elif (var(VAR_RESULT) == DIR_SOUTH) {
        applymovement(OBJ_EVENT_ID_PLAYER, WalkUp)
	    waitmovement(0)
    } elif (var(VAR_RESULT) == DIR_WEST) {
        applymovement(OBJ_EVENT_ID_PLAYER, WalkRight)
	    waitmovement(0)
    }
}

// Talk & Think
movement Talk {
    //emote_talking
}

movement Think {
    //emote_thinking
}

// Demo Mode Begin Announcement
script DemoBegin {
    lock
    msgbox(format("You are playing a DEMO of\n POKéMON LABRADORESCENT LIGHTS.\l This only contains the tutorial."), MSGBOX_DEFAULT)
    closemessage
    release
    return
}

// Demo Mode End
script DemoEnd {
    lockall
    fadenewbgm(MUS_DP_POKEMON_LEAGUE_NIGHT)
    delay(30)
    closemessage
    delay(30)
    msgbox(format("You have now completed the DEMO of\n POKéMON LABRADORESCENT LIGHTS."), MSGBOX_DEFAULT)
    waitmessage
    delay(30)
    fadescreen(FADE_TO_WHITE)
    delay(60)
    closemessage
    applymovement(OBJ_EVENT_ID_PLAYER, WalkDown)
    waitmovement(0)
    msgbox(format("Thank you very much for playing!\n Press A to return to the title screen."), MSGBOX_DEFAULT)
    waitmessage
    closemessage
    fadeoutbgm(4)
    special(DoSoftReset)
}

//BadgeCount Macro
script CountBadges { // Returns Number of Badges to VAR_RESULT. (Nine if Champion)
    setvar(VAR_RESULT, 0)
    if (flag(FLAG_BADGE01_GET) == TRUE) {
        addvar(VAR_RESULT, 1)
    } 
    if (flag(FLAG_BADGE02_GET) == TRUE) {
        addvar(VAR_RESULT, 1)
    } 
    if (flag(FLAG_BADGE03_GET) == TRUE) {
        addvar(VAR_RESULT, 1)
    } 
    if (flag(FLAG_BADGE04_GET) == TRUE) {
        addvar(VAR_RESULT, 1)
    } 
    if (flag(FLAG_BADGE05_GET) == TRUE) {
        addvar(VAR_RESULT, 1)
    } 
    if (flag(FLAG_BADGE06_GET) == TRUE) {
        addvar(VAR_RESULT, 1)
    } 
    if (flag(FLAG_BADGE07_GET) == TRUE) {
        addvar(VAR_RESULT, 1)
    } 
    if (flag(FLAG_BADGE08_GET) == TRUE) {
        addvar(VAR_RESULT, 1)
    } 
    if (flag(FLAG_IS_CHAMPION) == TRUE) {
        addvar(VAR_RESULT, 1)
    }  
}

script PrintBadges {
    closemessage
    switch (var(VAR_RESULT)) { // Add Red and Blue Orb Check from Map Scripts when decided when player will obtain.
            case 0:
                msgbox(format("None"), MSGBOX_NPC)
            case 1:
                msgbox(format("One"), MSGBOX_NPC)
            case 2:
                msgbox(format("Two"), MSGBOX_NPC)
            case 3:
                msgbox(format("Three"), MSGBOX_NPC)
            case 4:
                msgbox(format("Four"), MSGBOX_NPC)
            case 5:
                msgbox(format("Five"), MSGBOX_NPC)
            case 6:
                msgbox(format("Six"), MSGBOX_NPC)
            case 7:
                msgbox(format("Seven"), MSGBOX_NPC)
            case 8:
                msgbox(format("Eight"), MSGBOX_NPC)
            case 9:
                msgbox(format("Champion"), MSGBOX_NPC)
            default:
                msgbox(format("Broken"), MSGBOX_NPC)
            }
    closemessage
    releaseall
    return
}

// PokedexScripts
script SetKantoCaught {
    setvar(VAR_TEMP_A, SPECIES_BULBASAUR)
    while (var(VAR_TEMP_A) <= SPECIES_MEW) {
            setcaughtmonvar(VAR_TEMP_A)
            addvar(VAR_TEMP_A, 1)
        }
}

script SetAllCaught {
    setvar(VAR_TEMP_A, (SPECIES_NONE + 1))
    while (var(VAR_TEMP_A) <= NUM_SPECIES) {
            setcaughtmonvar(VAR_TEMP_A)
            addvar(VAR_TEMP_A, 1)
        }
}

// Calamity Queen
script LabLights_AbsolCry {
    playmoncry(SPECIES_ABSOL, 0)
	msgbox(format("Aurrra!"), MSGBOX_DEFAULT)
	waitmoncry
	closemessage
	setvar(VAR_LAB_LIGHTS, 0)
	questmenu(QUEST_MENU_CHECK_UNLOCKED, CALAMITY_QUEEN)
    delay(20)
    //applymovement(OBJ_EVENT_ID_PLAYER, Think)
    //waitmovement(0)
	if (var(VAR_RESULT) == FALSE) {
        msgbox(format("Oh?\n Was that a POKéMON cry?"), MSGBOX_SIGN)
        startquest(CALAMITY_QUEEN)
    } else {
        msgbox(format("There's that cry again,\n I wonder what POKéMON it was."), MSGBOX_SIGN)
    }
}

script LabLights_LaprasCry {
    playmoncry(SPECIES_SNORLAX, 0)
	msgbox(format("Burrrurrrr!"), MSGBOX_DEFAULT)
	waitmoncry
	closemessage
	setvar(VAR_LAB_LIGHTS, 0)
    questmenu(QUEST_MENU_CHECK_UNLOCKED, TEAM_AQUA)
    delay(20)
    //applymovement(OBJ_EVENT_ID_PLAYER, Think)
    //waitmovement(0)
    if (var(VAR_RESULT) == FALSE) {
        msgbox(format("Whoa!\n That cry was definitely made by\l a different POKéMON.\p I wonder what it was."), MSGBOX_SIGN)
    }
}

// Borea Passage Blocking
script LabLights_EventScript_MineOwner {
	if (var(VAR_TEMP_1) == 0) {
            msgbox(format("On behalf of the DEVON CORPORATION,\n hold it right there!\p We're tunneling and our workers are mining LABRADORITE up ahead.\p I can't let anyone by, so\n you're going to have to leave."), MSGBOX_NPC)
            addvar(VAR_TEMP_1, 1)
        } else {
            msgbox(format("Didn't you hear me?\p We're tunneling and our workers are mining LABRADORITE up ahead.\p I can't let anyone by, so\n you're going to have to leave."), MSGBOX_NPC)
        }
}

script OpenTheQuestMenu {
    openquestmenu
    end
}